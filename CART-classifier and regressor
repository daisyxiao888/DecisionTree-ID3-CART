#CART分类决策树
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
import graphviz
#准备数据集
iris = load_iris()
#获取特征集和分类标识
features = iris.data
labels = iris.target

#将数据集划分为测试集和训练集
train_features,test_features,train_labels,test_labels = train_test_split(features,labels,test_size=0.33)
#创建分类树
clf = DecisionTreeClassifier()
#拟合构造分类树
clf = clf.fit(train_features,train_labels)
#用分类树做预测
test_predict = clf.predict(test_features)
#将预测与测试集结果对比
score = accuracy_score(test_labels,test_predict)
print('CART分类树准确率 %.4lf' % score)
#决策树可视化
dot_data = tree.export_graphviz(clf, out_file=None)
graph = graphviz.Source(dot_data)
graph.view() 
    
    
#CART回归决策树
from sklearn.datasets import load_boston
from sklearn.metrics import mean_absolute_error,mean_squared_error
from sklearn.model_selection import train_test_split 
from sklearn.tree import DecisionTreeRegressor
from sklearn import tree
import graphviz

boston = load_boston()

features = boston.data
prices = boston.target

train_features,test_features,train_prices,test_prices = train_test_split(features,prices,test_size = 0.25)

dtr = DecisionTreeRegressor()

dtr = dtr.fit(train_features,train_prices)

predict_prices = dtr.predict(test_features)
print('回归树二乘偏差均值:', mean_squared_error(test_prices,predict_prices))
print('回归树绝对值偏差均值:', mean_absolute_error(test_prices,predict_prices))

dot_data1 = tree.export_graphviz(dtr, out_file=None)
graph = graphviz.Source(dot_data1)
graph.view() 
